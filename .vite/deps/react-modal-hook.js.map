{
  "version": 3,
  "sources": ["../../node_modules/react-modal-hook/src/ModalContext.ts", "../../node_modules/react-modal-hook/src/ModalRoot.tsx", "../../node_modules/react-modal-hook/src/ModalProvider.tsx", "../../node_modules/react-modal-hook/src/useModal.ts"],
  "sourcesContent": ["import * as React from \"react\";\n\n/**\n * Modals are represented as react components\n *\n * This is what gets passed to useModal as the first argument.\n */\nexport type ModalType = React.FunctionComponent<any>;\n\n/**\n * The shape of the modal context\n */\nexport interface ModalContextType {\n  showModal(key: string, component: ModalType): void;\n  hideModal(key: string): void;\n}\n\n/**\n * Throw error when ModalContext is used outside of context provider\n */\nconst invariantViolation = () => {\n  throw new Error(\n    \"Attempted to call useModal outside of modal context. Make sure your app is rendered inside ModalProvider.\"\n  );\n};\n\n/**\n * Modal Context Object\n */\nexport const ModalContext = React.createContext<ModalContextType>({\n  showModal: invariantViolation,\n  hideModal: invariantViolation\n});\nModalContext.displayName = 'ModalContext';\n", "import { memo, useState, useEffect } from \"react\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { ModalType } from \"./ModalContext\";\n\n/**\n * Modal Root Props\n */\ninterface ModalRootProps {\n  /**\n   * Map of modal instances associated by unique ids\n   */\n  modals: Record<string, ModalType>;\n\n  /**\n   * Container component for modals\n   *\n   * Modals will be rendered as children of this component. React.Fragment is\n   * used by defualt, specifying a different component can change the way modals\n   * are rendered across the whole application.\n   */\n  component?: React.ComponentType<any>;\n\n  /**\n   * Specifies the root element to render modals into\n   */\n  container?: Element;\n}\n\n/**\n * Modal renderer props\n */\ninterface ModalRendererProps {\n  /**\n   * Functional component representing the modal\n   */\n  component: ModalType;\n}\n\n/**\n * Component responsible for rendering the modal.\n *\n * The identity of `Component` may change dependeing on the inputs passed to\n * `useModal`. If we simply rendered `<Component />` then the modal would be\n * susceptible to rerenders whenever one of the inputs change.\n */\nconst ModalRenderer = memo(({ component, ...rest }: ModalRendererProps) =>\n  component(rest)\n);\n\n/**\n * Modal Root\n *\n * Renders modals using react portal.\n */\nexport const ModalRoot = memo(\n  ({\n    modals,\n    container,\n    component: RootComponent = React.Fragment\n  }: ModalRootProps) => {\n    const [mountNode, setMountNode] = useState<Element | undefined>(undefined);\n\n    // This effect will not be ran in the server environment\n    useEffect(() => setMountNode(container || document.body));\n\n    return mountNode\n      ? ReactDOM.createPortal(\n          <RootComponent>\n            {Object.keys(modals).map(key => (\n              <ModalRenderer key={key} component={modals[key]} />\n            ))}\n          </RootComponent>,\n          mountNode\n        )\n      : null;\n  }\n);\n", "import { useCallback, useState, useMemo } from \"react\";\nimport * as React from \"react\";\nimport { ModalType, ModalContext } from \"./ModalContext\";\nimport { ModalRoot } from \"./ModalRoot\";\n\n/**\n * Modal Provider Props\n */\nexport interface ModalProviderProps {\n  /**\n   * Specifies the root element to render modals into\n   */\n  container?: Element;\n\n  /**\n   * Container component for modal nodes\n   */\n  rootComponent?: React.ComponentType<any>;\n\n  /**\n   * Subtree that will receive modal context\n   */\n  children: React.ReactNode;\n}\n\n/**\n * Modal Provider\n *\n * Provides modal context and renders ModalRoot.\n */\nexport const ModalProvider = ({\n  container,\n  rootComponent,\n  children\n}: ModalProviderProps) => {\n  if (container && !(container instanceof HTMLElement)) {\n    throw new Error(`Container must specify DOM element to mount modal root into.\n\n    This behavior has changed in 3.0.0. Please use \\`rootComponent\\` prop instead.\n    See: https://github.com/mpontus/react-modal-hook/issues/18`);\n  }\n  const [modals, setModals] = useState<Record<string, ModalType>>({});\n  const showModal = useCallback(\n    (key: string, modal: ModalType) =>\n      setModals(modals => ({\n        ...modals,\n        [key]: modal\n      })),\n    []\n  );\n  const hideModal = useCallback(\n    (key: string) =>\n      setModals(modals => {\n        if (!modals[key]) {\n          return modals;\n        }\n        const newModals = { ...modals };\n        delete newModals[key];\n        return newModals;\n      }),\n    []\n  );\n  const contextValue = useMemo(() => ({ showModal, hideModal }), []);\n\n  return (\n    <ModalContext.Provider value={contextValue}>\n      <React.Fragment>\n        {children}\n        <ModalRoot\n          modals={modals}\n          component={rootComponent}\n          container={container}\n        />\n      </React.Fragment>\n    </ModalContext.Provider>\n  );\n};\n", "import { useContext, useEffect, useState, useCallback, useMemo, DependencyList } from \"react\";\nimport { ModalContext, ModalType } from \"./ModalContext\";\n\n/**\n * Callback types provided for descriptive type-hints\n */\ntype ShowModal = () => void;\ntype HideModal = () => void;\n\n/**\n * Utility function to generate unique number per component instance\n */\nconst generateModalKey = (() => {\n  let count = 0;\n\n  return () => `${++count}`;\n})();\n\n/**\n * Check whether the argument is a stateless component.\n *\n * We take advantage of the stateless nature of functional components to be\n * inline the rendering of the modal component as part of another immutable\n * component.\n *\n * This is necessary for allowing the modal to update based on the inputs passed\n * as the second argument to useModal without unmounting the previous version of\n * the modal component.\n */\nconst isFunctionalComponent = (Component: Function) => {\n  const prototype = Component.prototype;\n\n  return !prototype || !prototype.isReactComponent;\n};\n\n/**\n * React hook for showing modal windows\n */\nexport const useModal = (\n  component: ModalType,\n  inputs: DependencyList = []\n): [ShowModal, HideModal] => {\n  if (!isFunctionalComponent(component)) {\n    throw new Error(\n      \"Only stateless components can be used as an argument to useModal. You have probably passed a class component where a function was expected.\"\n    );\n  }\n\n  const key = useMemo(generateModalKey, []);\n  const modal = useMemo(() => component, inputs);\n  const context = useContext(ModalContext);\n  const [isShown, setShown] = useState<boolean>(false);\n  const showModal = useCallback(() => setShown(true), []);\n  const hideModal = useCallback(() => setShown(false), []);\n\n  useEffect(() => {\n    if (isShown) {\n      context.showModal(key, modal);\n    } else {\n      context.hideModal(key);\n    }\n\n    // Hide modal when parent component unmounts\n    return () => context.hideModal(key);\n  }, [modal, isShown]);\n\n  return [showModal, hideModal];\n};\n"],
  "mappings": "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",
  "names": ["modals", "_a"]
}
